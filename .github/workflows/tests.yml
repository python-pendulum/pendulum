name: Tests

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches:
      - master
  pull_request:
    paths-ignore:
      - 'docs/**'
    branches:
      - '**'

jobs:
  Linting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Linting
        run: |
          pip install pre-commit
          pre-commit run --all-files

  Tests:
    needs: Linting
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: [3.7, 3.8, 3.9, "3.10"]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry
        shell: bash
        run: |
          curl -fsS -o install-poetry.py https://raw.githubusercontent.com/sdispater/poetry/master/install-poetry.py
          python install-poetry.py --preview -y

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        shell: bash
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'Windows' }}
        shell: bash
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install dependencies
        shell: bash
        run: poetry install --only default --only test -vvv

      - name: Test Pure Python
        shell: bash
        run: |
          PENDULUM_EXTENSIONS=0 poetry run pytest -q tests

      - name: Test
        shell: bash
        run: |
          poetry run pytest -q tests

  Linux-AArch64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [cp37-cp37m, cp38-cp38, cp39-cp39, cp310-cp310]
      fail-fast: false
    env:
      py: /opt/python/${{ matrix.python-version }}/bin/python
      img: quay.io/pypa/manylinux2014_aarch64
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1

      - name: Setup test environment and run tests
        run: |
          docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '\
            echo -e "\e[1;34m Install poetry \e[0m" && \
            curl -fsS -o install-poetry.py https://raw.githubusercontent.com/sdispater/poetry/master/install-poetry.py && \
            ${{ env.py }} install-poetry.py --preview -y && \
            echo -e "\e[1;34m Update PATH \e[0m" && \
            export PATH="/root/.local/bin:$PATH" && \
            echo -e "\e[1;34m Configure poetry \e[0m" && \
            poetry config virtualenvs.in-project true && \
            echo -e "\e[1;34m Install dependencies \e[0m" && \
            poetry install --only default --only test -vvv && \
            echo -e "\e[1;34m Test Pure Python \e[0m" && \
            PENDULUM_EXTENSIONS=0 poetry run pytest -q tests && \
            echo -e "\e[1;34m Test \e[0m" && \
            poetry run pytest -q tests'
